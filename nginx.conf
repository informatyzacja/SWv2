#user html;
worker_processes  1;

error_log /opt/sw/logs/error.log;
pid       /opt/sw/logs/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Nice log format
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
        '$status $body_bytes_sent "$http_referer" '
        '"$http_user_agent" "$http_x_forwarded_for"';
    
    access_log  /opt/sw/logs/access.log  main;

    # When on an OS supporting the sendfile() API, speed things a bit up
    sendfile on;

    # Don't send out nginx version in the Server: http header
    server_tokens off;

    # nginx warns about 1024 (the default) being too low
    types_hash_max_size 4096;

    server {
        # Port to listen to
        listen 8081;

        # A catch-all server name - change this to the target hostname
        server_name _;

        root /opt/sw/empty;

        location ~ ^/v/[A-Za-z0-9_-]*$ {
            return 307 $uri/;
        }

        location ~ ^/v/[A-Za-z0-9_-]*/$ {
            root /opt/sw;
            default_type text/html;
            try_files $uri/index.html =404;
        }

        location ~ ^/v/([A-Za-z0-9_-]*)/vote$ {
            root /opt/sw/empty;
            default_type text/html;

            # Only allow POSTs here
            limit_except POST { deny all; }

            # If there's no file for that token, tell the browser it did something wrong
            if (!-f /opt/sw/v/$1/index.html) {
                return 400 "Invalid token";
            }

            # After a successfuly cast vote, remove the saved /voting data, so the
            # user cannot see voting options again and cannot successfully vote again
            # Even though logic in nginx is not sequential, this block does not execute
            # if return 400 is met.
            # This requires Openresty for lua support.
            # Do the redirect in lua instead of in nginx because that's how nginx works
            # - we don't want this running if the previous return is met.
            lua_need_request_body on;
            rewrite_by_lua_block {
                local filename = "/opt/sw/v/" .. ngx.var[1] .. "/results/" .. ngx.var[1]
                local file = assert(io.open(filename, "a"))
                file:write(ngx.req.get_body_data() .. "\n\n")
                file:flush()
                file:close()
                -- TODO: this
                -- os.remove("/opt/sw/v/" .. ngv.var[1])
                ngx.redirect("/thankyou", 303)
            }
        }

        location = /thankyou {
            root /opt/sw/static;
            default_type text/html;
            try_files /thankyou.html =404;
        }

        location /static/ {
            root /opt/sw;
            try_files $uri =404;
        }

        # A response signifying a token we have no idea about, used in /voting
        location @invalid_token {
            return 400 "Invalid token";
        }

        location /admin {
            #root /opt/sw;
            #try_files $uri $uri/index.html =404;
            proxy_pass http://127.0.0.1:5000; # <-- the lack of "/" at the end prevents nginx from stripping out "/admin" from the url
        }

        location /api/ {
            # TODO: use proper WSCGI for Flask
            proxy_pass http://127.0.0.1:5000/; # <-- the "/" at the end strips "/api" from url
        }
    }
}
